// Mocks generated by Mockito 5.4.6 from annotations
// in bus2_test/test/modules/core/presentation/cubit/home_page_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bus2_test/modules/core/domain/entities/user.dart' as _i2;
import 'package:bus2_test/modules/home/domain/use_cases/fetch_user_usecase.dart'
    as _i4;
import 'package:bus2_test/modules/home/domain/use_cases/search_user_usecase.dart'
    as _i6;
import 'package:flutter/src/scheduler/ticker.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTicker_1 extends _i1.SmartFake implements _i3.Ticker {
  _FakeTicker_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [FetchNewUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchNewUserUseCase extends _i1.Mock
    implements _i4.FetchNewUserUseCase {
  MockFetchNewUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.User> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#call, [])),
            ),
          )
          as _i5.Future<_i2.User>);
}

/// A class which mocks [SearchHomeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchHomeUseCase extends _i1.Mock implements _i6.SearchHomeUseCase {
  MockSearchHomeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.User> call(_i6.SearchHomeParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: <_i2.User>[],
          )
          as List<_i2.User>);
}

/// A class which mocks [TickerProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTickerProvider extends _i1.Mock implements _i3.TickerProvider {
  MockTickerProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Ticker createTicker(_i3.TickerCallback? onTick) =>
      (super.noSuchMethod(
            Invocation.method(#createTicker, [onTick]),
            returnValue: _FakeTicker_1(
              this,
              Invocation.method(#createTicker, [onTick]),
            ),
          )
          as _i3.Ticker);
}
