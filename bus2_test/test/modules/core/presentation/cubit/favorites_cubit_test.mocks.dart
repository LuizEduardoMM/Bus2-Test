// Mocks generated by Mockito 5.4.6 from annotations
// in bus2_test/test/modules/core/presentation/cubit/favorites_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:bus2_test/modules/core/domain/entities/user.dart' as _i4;
import 'package:bus2_test/modules/core/domain/use_cases/add_favorites_usecase.dart'
    as _i2;
import 'package:bus2_test/modules/core/domain/use_cases/get_favorites_usecase.dart'
    as _i5;
import 'package:bus2_test/modules/core/domain/use_cases/remove_favorites_usecase.dart'
    as _i6;
import 'package:bus2_test/modules/core/domain/use_cases/search_favorites_usecase.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AddFavoritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddFavoritesUseCase extends _i1.Mock
    implements _i2.AddFavoritesUseCase {
  MockAddFavoritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(_i4.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#call, [user]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [GetFavoritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoritesUseCase extends _i1.Mock
    implements _i5.GetFavoritesUseCase {
  MockGetFavoritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.User>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i3.Future<List<_i4.User>>.value(<_i4.User>[]),
          )
          as _i3.Future<List<_i4.User>>);
}

/// A class which mocks [RemoveFavoritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveFavoritesUseCase extends _i1.Mock
    implements _i6.RemoveFavoritesUseCase {
  MockRemoveFavoritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SearchFavoritesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchFavoritesUseCase extends _i1.Mock
    implements _i7.SearchFavoritesUseCase {
  MockSearchFavoritesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.User> call(_i7.SearchFavoritesParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: <_i4.User>[],
          )
          as List<_i4.User>);
}
